//////////////////////////
=== Distributed Workflows
//////////////////////////
=== 分散作業の流れ

(((workflows)))
//////////////////////////
Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects.
In centralized systems, every developer is a node working more or less equally on a central hub.
In Git, however, every developer is potentially both a node and a hub – that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to.
This opens a vast range of workflow possibilities for your project and/or your team, so we'll cover a few common paradigms that take advantage of this flexibility.
We'll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each.
//////////////////////////
中央管理型のバージョン管理システム (Centralized Version Control System: CVCS) とは違い、Git は分散型だという特徴があります。この特徴を生かすと、プロジェクトの開発者間での共同作業をより柔軟に行えるようになります。
中央管理型のシステムでは、個々の開発者は中央のハブに対するノードという位置づけとなります。
しかし Git では、各開発者はノードであると同時にハブにもなり得ます。つまり、誰もが他のリポジトリに対してコードを提供することができ、誰もが公開リポジトリを管理して他の開発者の作業を受け入れることもできるということです。
これは、みなさんのプロジェクトや開発チームでの作業の流れにさまざまな可能性をもたらします。本章では、この柔軟性を生かすいくつかの実例を示します。
それぞれについて、利点だけでなく想定される弱点についても扱うので、適宜取捨選択してご利用ください。

//////////////////////////
==== Centralized Workflow
//////////////////////////
==== 中央集権型のワークフロー

(((workflows, centralized)))
//////////////////////////
In centralized systems, there is generally a single collaboration model–the centralized workflow.
One central hub, or repository, can accept code, and everyone synchronizes their work to it.
A number of developers are nodes – consumers of that hub – and synchronize to that one place.
//////////////////////////
中央管理型のシステムでは共同作業の方式は一つだけです。それが中央集権型のワークフローです。
これは、中央にある一つのハブ (リポジトリ) がコードを受け入れ、他のメンバー全員がそこに作業内容を同期させるという流れです。
多数の開発者がハブにつながるノードとなり、作業を一か所に集約します。

//////////////////////////
.Centralized workflow.
image::images/centralized_workflow.png[Centralized workflow.]
//////////////////////////
.中央集権型のワークフロー
image::images/centralized_workflow.png[中央集権型のワークフロー]

//////////////////////////
This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems.
The second developer must merge in the first one's work before pushing changes up, so as not to overwrite the first developer's changes.
This concept is as true in Git as it is in Subversion(((Subversion))) (or any CVCS), and this model works perfectly well in Git.
//////////////////////////
二人の開発者がハブからのクローンを作成して個々に変更をした場合、最初の開発者がそれをプッシュするのは特に問題なくできます。
もう一人の開発者は、まず最初の開発者の変更をマージしてからサーバーへのプッシュを行い、最初の開発者の変更を消してしまわないようにします。
この考え方は、Git 上でも Subversion (((Subversion))) (あるいはその他の CVCS) と同様に生かせます。そしてこの方式は Git でも完全に機能します。

//////////////////////////
If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git.
Simply set up a single repository, and give everyone on your team push access; Git won't let users overwrite each other.
Say John and Jessica both start working at the same time.
John finishes his change and pushes it to the server.
Then Jessica tries to push her changes, but the server rejects them.
She is told that she's trying to push non-fast-forward changes and that she won't be able to do so until she fetches and merges.
This workflow is attractive to a lot of people because it's a paradigm that many are familiar and comfortable with.
//////////////////////////
小規模なチームに所属していたり、組織内で既に中央集権型のワークフローになじんでいたりなどの場合は、Git でその方式を続けることも簡単です。
リポジトリをひとつ立ち上げて、チームのメンバー全員がそこにプッシュできるようにすればいいのです。Git は他のユーザーの変更を上書きしてしまうことはありません。
たとえば、John と Jessica が作業を一斉に始めたとしましょう。
先に作業が終わった John が、変更をサーバーにプッシュします。
次に、Jessica が変更をプッシュしようとすると、サーバー側でそのプッシュは拒否されます。
そして Jessica は、直接プッシュすることはできないのでまずは変更内容をマージする必要があることを Git のエラーメッセージから気づきます。
この方式は多くの人にとって魅力的なものでしょう。これまでにもなじみのある方式だし、今までそれでうまくやってきたからです。

//////////////////////////
This is also not limited to small teams.
With Git's branching model, it's possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.
//////////////////////////
また、この例は小規模なチームに限った話ではありません。Git のブランチモデルを用いてひとつのプロジェクト上にたくさんのブランチを作れば、何百人もの開発者が同時並行で作業を進めることだってできるのです。

[[_integration_manager]]
//////////////////////////
==== Integration-Manager Workflow
//////////////////////////
==== 統合マネージャー型のワークフロー

(((workflows, integration manager)))
//////////////////////////
Because Git allows you to have multiple remote repositories, it's possible to have a workflow where each developer has write access to their own public repository and read access to everyone else's.
This scenario often includes a canonical repository that represents the ``official'' project.
To contribute to that project, you create your own public clone of the project and push your changes to it.
Then, you can send a request to the maintainer of the main project to pull in your changes.
The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
The process works as follows (see <<wfdiag_b>>):
//////////////////////////
Git では複数のリモートリポジトリを持つことができるので、書き込み権限を持つ公開リポジトリを各自が持ち、他のメンバーからは読み込みのみのアクセスを許可するという方式をとることもできます。
この方式には、「公式」プロジェクトを表す公式なリポジトリも含みます。
このプロジェクトの開発に参加するには、まずプロジェクトのクローンを自分用に作成し、変更はそこにプッシュします。
次に、メインプロジェクトのメンテナーに「変更を取り込んでほしい」とお願いします。
メンテナーはあなたのリポジトリをリモートに追加し、変更を取り込んでマージします。そしてその結果をリポジトリにプッシュするのです。
この作業の流れは次のようになります ( <<wfdiag_b>> を参照ください)。

//////////////////////////
1.  The project maintainer pushes to their public repository.
2.  A contributor clones that repository and makes changes.
3.  The contributor pushes to their own public copy.
4.  The contributor sends the maintainer an email asking them to pull changes.
5.  The maintainer adds the contributor's repo as a remote and merges locally.
6.  The maintainer pushes merged changes to the main repository.
//////////////////////////
1.  プロジェクトのメンテナーが公開リポジトリにプッシュする
2.  開発者がそのリポジトリをクローンし、変更を加える
3.  開発者が各自の公開リポジトリにプッシュする
4.  開発者がメンテナーに「変更を取り込んでほしい」というメールを送る
5.  メンテナーが開発者のリポジトリをリモートに追加し、それをマージする
6.  マージした結果をメンテナーがメインリポジトリにプッシュする

[[wfdiag_b]]
//////////////////////////
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]
//////////////////////////
.統合マネージャー型のワークフロー
image::images/integration-manager.png[統合マネージャー型のワークフロー]

(((forking)))
//////////////////////////
This is a very common workflow with hub-based tools like GitHub or GitLab, where it's easy to fork a project and push your changes into your fork for everyone to see.
One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time.
Contributors don't have to wait for the project to incorporate their changes – each party can work at their own pace.
//////////////////////////
これは GitHub や GitLab のようなハブ型のツールでよく使われている流れです。プロジェクトを容易にフォークでき、そこにプッシュした内容をみんなに簡単に見てもらえます。
この方式の主な利点の一つは、あなたはそのまま開発を続行し、メインリポジトリのメンテナーはいつでも好きなタイミングで変更を取り込めるということです。
変更を取り込んでもらえるまで作業を止めて待つ必要はありません。自分のペースで作業を進められるのです。

//////////////////////////
==== Dictator and Lieutenants Workflow
//////////////////////////
==== 独裁者と副官型のワークフロー

(((workflows, dictator and lieutenants)))
//////////////////////////
This is a variant of a multiple-repository workflow.
It's generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.
Various integration managers are in charge of certain parts of the repository; they're called lieutenants.
All the lieutenants have one integration manager known as the benevolent dictator.
The benevolent dictator's repository serves as the reference repository from which all the collaborators need to pull.
The process works like this (see <<wfdiag_c>>):
//////////////////////////
これは、複数リポジトリ型のワークフローのひとつです。
何百人もの開発者が参加するような巨大なプロジェクトで採用されています。有名どころでは Linux カーネルがこの方式です。
統合マネージャーを何人も用意し、それぞれにリポジトリの特定の部分を担当させます。彼らは副官 (lieutenant) と呼ばれます。
そしてすべての副官をまとめる統合マネージャーが「慈悲深い独裁者 (benevolent dictator)」です。
独裁者のリポジトリが基準リポジトリとなり、すべてのメンバーはこれをプルします。
この作業の流れは次のようになります ( <<wfdiag_c>> を参照ください)。

//////////////////////////
1.  Regular developers work on their topic branch and rebase their work on top of `master`.
    The `master` branch is that of the dictator.
2.  Lieutenants merge the developers' topic branches into their `master` branch.
3.  The dictator merges the lieutenants' `master` branches into the dictator's `master` branch.
4.  The dictator pushes their `master` to the reference repository so the other developers can rebase on it.
//////////////////////////
1.  一般の開発者はトピックブランチ上で作業を進め、`master` の先頭にリベースする。独裁者の `master` ブランチがマスターとなる
2.  副官が各開発者のトピックブランチを自分の `master` ブランチにマージする
3.  独裁者が各副官の `master` ブランチを自分の `master` ブランチにマージする
4.  独裁者が自分の `master` をリポジトリにプッシュし、他のメンバーがリベースできるようにする

[[wfdiag_c]]
//////////////////////////
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]
//////////////////////////
.慈悲深い独裁者型のワークフロー
image::images/benevolent-dictator.png[慈悲深い独裁者型のワークフロー]

//////////////////////////
This kind of workflow isn't common, but can be useful in very big projects, or in highly hierarchical environments.
It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.
//////////////////////////
この手のワークフローはあまり一般的ではありませんが、大規模なプロジェクトや高度に階層化された環境では便利です。
プロジェクトリーダー (独裁者) が大半の作業を委譲し、サブセット単位である程度まとまってからコードを統合することができるからです。

//////////////////////////
==== Workflows Summary
//////////////////////////
==== ワークフローのまとめ

//////////////////////////
These are some commonly used workflows that are possible with a distributed system like Git, but you can see that many variations are possible to suit your particular real-world workflow.
Now that you can (hopefully) determine which workflow combination may work for you, we'll cover some more specific examples of how to accomplish the main roles that make up the different flows.
In the next section, you'll learn about a few common patterns for contributing to a project.
//////////////////////////
Git のような分散システムでよく使われるワークフローの多くは、実社会での何らかのワークフローにあてはめて考えることができます。
これで、どのワークフローがあなたに合うかがわかったことでしょう (ですよね?)。
次は、より特化した例をあげて個々のフローを実現する方法を見ていきましょう。
