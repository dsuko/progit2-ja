=== GitLab

(((serving repositories, GitLab)))(((GitLab)))
//////////////////////////
GitWeb is pretty simplistic though.
If you're looking for a more modern, fully featured Git server, there are some several open source solutions out there that you can install instead.
As GitLab is one of the more popular ones, we'll cover installing and using it as an example.
This is a bit more complex than the GitWeb option and likely requires more maintenance, but it is a much more fully featured option.
//////////////////////////
前節で紹介した GitWeb はとてもシンプルでした。
もし、もっとモダンで高機能な Git サーバーが必要な場合には、他のオープンソース・ソフトウェアが選択肢になるでしょう。
それらのなかでも GitLab はよく使われていますので、一例として紹介します。
GitWeb よりも複雑でメンテナンスも必要ではありますが、GitLab はより高機能な選択肢です。

//////////////////////////
==== Installation
//////////////////////////
==== インストール

//////////////////////////
GitLab is a database-backed web application, so its installation is a bit more involved than some other git servers.
Fortunately, this process is very well-documented and supported.
//////////////////////////
GitLab はデータベースを使用する Web アプリケーションです。そのため、インストール方法は他の Git サーバーより複雑になってしまいます。
とはいえ、幸いなことにドキュメントは充実していて、かつ手順は簡素化されています。

//////////////////////////
There are a few methods you can pursue to install GitLab.
To get something up and running quickly, you can download a virtual machine image or a one-click installer from https://bitnami.com/stack/gitlab[], and tweak the configuration to match your particular environment.(((bitnami)))
One nice touch Bitnami has included is the login screen (accessed by typing alt+→); it tells you the IP address and default username and password for the installed GitLab.
//////////////////////////
GitLab は数種類の方法でインストールできます。
とりあえず動かしてみるには、仮想マシンのイメージ、もしくはワンクリックインストーラーを使います。 https://bitnami.com/stack/gitlab[] からそれらのファイルをダウンロード・インストールし、使用する環境に応じて設定を変更しましょう。 (((bitnami)))
この方法では、Bitnami が気を利かせてログイン画面を使えるようにしてくれています（alt+->と入力すると表示されます）。インストールした GitLab 用の IP アドレス・ユーザー名・パスワードを表示してくれる便利な画面です。

[[bitnami]]
//////////////////////////
.The Bitnami GitLab virtual machine login screen.
image::images/bitnami.png[The Bitnami GitLab virtual machine login screen.]
//////////////////////////
.Bitnami GitLab 仮想マシンのログイン画面
image::images/bitnami.png[Bitnami GitLab 仮想マシンのログイン画面]

//////////////////////////
For anything else, follow the guidance in the GitLab Community Edition readme, which can be found at https://gitlab.com/gitlab-org/gitlab-ce/tree/master[].
There you'll find assistance for installing GitLab using Chef recipes, a virtual machine on Digital Ocean, and RPM and DEB packages (which, as of this writing, are in beta).
There's also ``unofficial'' guidance on getting GitLab running with non-standard operating systems and databases, a fully-manual installation script, and many other topics.
//////////////////////////
その他の方法については、GitLab Community Edition の README を参照してください。 https://gitlab.com/gitlab-org/gitlab-ce/tree/master[] で確認できます。
そこで紹介されている GitLab のインストール方法には、Chef のレシピを使う方法、Digital Ocean で仮想マシンを用いる方法、RPM や DEB のパッケージを用いる方法（執筆段階ではベータ）などがあります。
その他にも ``非公式'' のガイドとして、サポート外の OS やデータベースで GitLab を動かす方法、手動でインストールを行うためのスクリプトなど、多くのトピックが紹介されています。

//////////////////////////
==== Administration
//////////////////////////
==== GitLab の管理

//////////////////////////
GitLab's administration interface is accessed over the web.
Simply point your browser to the hostname or IP address where GitLab is installed, and log in as an admin user.
The default username is `admin@local.host`, and the default password is `5iveL!fe` (which you will be prompted to change as soon as you enter it).
Once logged in, click the ``Admin area'' icon in the menu at the top right.
//////////////////////////
GitLab の管理画面はブラウザでアクセスします。
ブラウザを使って GitLab をインストールしたサーバーのホスト名か IP アドレスにアクセスし、管理者としてログインしましょう。
デフォルトのユーザー名は `admin@local.host` で、デフォルトのパスワードは `5iveL!fe`  です（この組み合わせでログインすると、パスワードを変更することを最初に促されます）。
ログインしたら、 画面右上のメニューにある ``Admin area'' のアイコンをクリックしましょう。

[[gitlab_menu]]
//////////////////////////
.The ``Admin area'' item in the GitLab menu.
image::images/gitlab-menu.png[The ``Admin area'' item in the GitLab menu.]
//////////////////////////
.GitLab メニューにある ``Admin area'' の項目
image::images/gitlab-menu.png[GitLab メニューにある ``Admin area'' の項目]

//////////////////////////
===== Users
//////////////////////////
===== ユーザー

//////////////////////////
Users in GitLab are accounts that correspond to people.
User accounts don't have a lot of complexity; mainly it's a collection of personal information attached to login data.
Each user account comes with a *namespace*, which is a logical grouping of projects that belong to that user.
If the user +jane+ had a project named +project+, that project's url would be http://server/jane/project[].
//////////////////////////
GitLab におけるユーザーは、使用者に紐付けられたアカウントのことを指します。
それは複雑なものではありません。メインはログイン情報ごとに登録された個人情報です。
また、ユーザーアカウントには *名前空間* が設定されていて、ユーザーが保持するプロジェクトの識別子として用いられます。
たとえば、ユーザー +jane+ が +project+ という名前のプロジェクトを保持していた場合は、そのプロジェクトの URL は http://server/jane/project[] になります。

[[gitlab_users]]
//////////////////////////
.The GitLab user administration screen.
image::images/gitlab-users.png[The GitLab user administration screen.]
//////////////////////////
.GitLab ユーザー管理画面
image::images/gitlab-users.png[GitLab ユーザー管理画面]

//////////////////////////
Removing a user can be done in two ways.
``Blocking'' a user prevents them from logging into the GitLab instance, but all of the data under that user's namespace will be preserved, and commits signed with that user's email address will still link back to their profile.
//////////////////////////
ユーザーを削除する場合、やり方は2つです。
まずはユーザーを「ブロック」する方法です。この場合、ブロックされたユーザーは GitLab にはログインできなくなります。一方、ユーザーの名前空間配下のデータは削除されず、ユーザーのメールアドレスで署名されたコミットとユーザープロファイルとの関連付けも有効なままになります。

//////////////////////////
``Destroying'' a user, on the other hand, completely removes them from the database and filesystem.
All projects and data in their namespace is removed, and any groups they own will also be removed.
This is obviously a much more permanent and destructive action, and its uses are rare.
//////////////////////////
もうひとつのやり方はユーザーを「破壊」する方法です。ユーザーを破壊すると、GitLab のデータベース、ファイルシステムから削除されます。
ユーザーの名前空間配下のデータ・プロジェクトも削除されますし、そのユーザーが作成したグループも同じように削除されます。
この方法は「ブロック」と比べはるかに恒久的でやり直しがきかないものです。よって、使われることはめったにありません。

[[_gitlab_groups_section]]
//////////////////////////
===== Groups
//////////////////////////
===== グループ

//////////////////////////
A GitLab group is an assemblage of projects, along with data about how users can access those projects.
Each group has a project namespace (the same way that users do), so if the group +training+ has a project +materials+, its url would be http://server/training/materials[].
//////////////////////////
GitLab では、複数のプロジェクトをグループとしてまとめられます。そして、グループにはプロジェクトごとのユーザーのアクセス権情報も含まれています。
また、ユーザーの場合と同じように、それぞれのグループには名前空間があります。たとえば、 +training+ グループに +materials+ というプロジェクトがあった場合、URL は http://server/training/materials[] になります。

[[gitlab_groups]]
//////////////////////////
.The GitLab group administration screen.
image::images/gitlab-groups.png[The GitLab group administration screen.]
//////////////////////////
.GitLab グループ管理画面
image::images/gitlab-groups.png[GitLab グループ管理画面]

//////////////////////////
Each group is associated with a number of users, each of which has a level of permissions for the group's projects and the group itself.
These range from ``Guest'' (issues and chat only) to ``Owner'' (full control of the group, its members, and its projects).
The types of permissions are too numerous to list here, but GitLab has a helpful link on the administration screen.
//////////////////////////
グループにはメンバーを追加できます。さらに、メンバーそれぞれにプロジェクトごとの権限と、グループそのものに対する権限が設定できます。
権限は ``Guest'' （issues とチャットのみ）から ``Owner'' （グループと配下のメンバー・プロジェクトの管理権限）までが用意されています。
各権限の詳細は膨大なため省略しますが、管理画面にあるリンクを辿ると確認できるようになっています。

//////////////////////////
===== Projects
//////////////////////////
===== プロジェクト

//////////////////////////
A GitLab project roughly corresponds to a single git repository.
Every project belongs to a single namespace, either a user or a group.
If the project belongs to a user, the owner of the project has direct control over who has access to the project; if the project belongs to a group, the group's user-level permissions will also take effect.
//////////////////////////
GitLab のプロジェクトとは、大体の場合ひとつの Git のリポジトリを指します。
なんらかの名前空間（ユーザーかグループ）に、プロジェクトはすべて属しています。
プロジェクトがユーザーの名前空間に属していれば、そのオーナーはアクセス権をすべて管理できます。プロジェクトがグループに属していれば、グループ自体のアクセス権設定がプロジェクトにも引き継がれます。

//////////////////////////
Every project also has a visibility level, which controls who has read access to that project's pages and repository.
If a project is _Private_, the project's owner must explicitly grant access to specific users.
An _Internal_ project is visible to any logged-in user, and a _Public_ project is visible to anyone.
Note that this controls both git ``fetch'' access as well as access to the web UI for that project.
//////////////////////////
また、プロジェクトには公開レベル設定があり、どのユーザーにプロジェクトのページとリポジトリの読み込み権限を与えるかを設定できます。
プロジェクトが _Private_ の場合、アクセス権をユーザーごとに明示的に設定する必要があります。
プロジェクトが _Internal_ の場合はログイン済みのユーザーであれば閲覧でき、_Public_ なプロジェクトであれば誰でも閲覧できます。
なお、この設定で、Git の ``fetch'' コマンドと ウェブ画面の両方のアクセス権が設定されることに注意しましょう。

//////////////////////////
===== Hooks
//////////////////////////
===== フック

//////////////////////////
GitLab includes support for hooks, both at a project or system level.
For either of these, the GitLab server will perform an HTTP POST with some descriptive JSON whenever relevant events occur.
This is a great way to connect your git repositories and GitLab instance to the rest of your development automation, such as CI servers, chat rooms, or deployment tools.
//////////////////////////
GitLab はフック（プロジェクト・システムの両方）に対応しています。
どちらのフックであれ、該当のイベントが発生した都度、GitLab のサーバーは JSON データを使って HTTP POST リクエストを発行します。
これは、Git リポジトリや GitLab を開発自動化の仕組みと連携させるときにとても便利です。特に CI サーバー・チャットサービス・デプロイ用のツールなどとの連携に役立つでしょう。

//////////////////////////
==== Basic Usage
//////////////////////////
==== 基本的な使い方

//////////////////////////
The first thing you'll want to do with GitLab is create a new project.
This is accomplished by clicking the ``+'' icon on the toolbar.
You'll be asked for the project's name, which namespace it should belong to, and what its visibility level should be.
Most of what you specify here isn't permanent, and can be re-adjusted later through the settings interface.
Click ``Create Project'', and you're done.
//////////////////////////
GitLab で最初にやるべきことは、新規プロジェクトの作成です。
ツールバーの ``+'' アイコンをクリックすると作成が始まります。
まず、プロジェクト名称・所属すべき名前空間・公開レベル設定を作成時に入力します。
それらの大半は設定画面からあとから変更可能です。
次に ``Create Project'' をクリックすれば、プロジェクトが作成されます。

//////////////////////////
Once the project exists, you'll probably want to connect it with a local Git repository.
Each project is accessible over HTTPS or SSH, either of which can be used to configure a Git remote.
The URLs are visible at the top of the project's home page.
For an existing local repository, this command will create a remote named `gitlab` to the hosted location:
//////////////////////////
プロジェクトが作成されたら、まずは手元の Git リポジトリとそのプロジェクトを関連付けるとよいでしょう。
プロジェクトにアクセスするには HTTPS か SSH を使います。いずれも、Git のリモートとして設定可能なプロトコルです。
設定用の URL は、プロジェクトのページの最上部に表示されています。

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

//////////////////////////
If you don't have a local copy of the repository, you can simply do this:
//////////////////////////
手元に Git リポジトリがない場合は、以下のようにしてリモートからクローンしましょう。

[source,console]
----
$ git clone https://server/namespace/project.git
----

//////////////////////////
The web UI provides access to several useful views of the repository itself.
Each project's home page shows recent activity, and links along the top will lead you to views of the project's files and commit log.
//////////////////////////
GitLab の ウェブ画面には、リポジトリの情報を確認する便利な画面がいくつもあります。
プロジェクトのトップページでは最近の行動履歴が確認できますし、画面上部にあるリンクをたどるとファイル一覧やコミットログを確認できます。

//////////////////////////
==== Working Together
//////////////////////////
==== 共同作業

//////////////////////////
The simplest way of working together on a GitLab project is by giving another user direct push access to the git repository.
You can add a user to a project by going to the ``Members'' section of that project's settings, and associating the new user with an access level (the different access levels are discussed a bit in <<_gitlab_groups_section>>).
By giving a user an access level of ``Developer'' or above, that user can push commits and branches directly to the repository with impunity.
//////////////////////////
GitLab でホストしているプロジェクトで共同作業を行うもっともシンプルな方法は、Git リポジトリへのプッシュアクセス権を相手に与えてしまうことです。
ユーザーをプロジェクトに追加するには、プロジェクトの設定画面にある ``Members'' のセクションを使います。新規ユーザーにアクセス権を設定するのにも同じセクションを使います（アクセス権の詳細については、 <<_gitlab_groups_section>> でも少し触れました）。
ユーザーに付与された権限が ``Developer'' かそれ以上であれば、リポジトリへコミットやブランチを問題なく直接プッシュできます。

//////////////////////////
Another, more decoupled way of collaboration is by using merge requests.
This feature enables any user that can see a project to contribute to it in a controlled way.
Users with direct access can simply create a branch, push commits to it, and open a merge request from their branch back into `master` or any other branch.
Users who don't have push permissions for a repository can ``fork'' it (create their own copy), push commits to _that_ copy, and open a merge request from their fork back to the main project.
This model allows the owner to be in full control of what goes into the repository and when, while allowing contributions from untrusted users.
//////////////////////////
もうひとつ、より疎結合な共同作業の方法があります。マージリクエストです。
この機能を使えば、任意のユーザー（プロジェクトを閲覧可能なユーザーに限られます）に所定の方法で共同作業に参加してもらえます。
まず、リポジトリに直接プッシュする権限のあるユーザーの場合は、ブランチを作ってコミットをプッシュしたうえで、そのブランチから `master` など希望するブランチに向けてマージリクエストを作成します。
一方、プッシュ権限のないユーザーの場合、まずはリポジトリを「フォーク」（自分専用のコピーを作成）します。続いて _その_ コピーにコミットをプッシュしたら、コピーから本家に向けてマージリクエストを作成しましょう。
この方法を使えば、どんな変更がいつリポジトリに追加されるかを管理者が管理しつつ、任意のユーザーに共同作業に参加してもらえます。

//////////////////////////
Merge requests and issues are the main units of long-lived discussion in GitLab.
Each merge request allows a line-by-line discussion of the proposed change (which supports a lightweight kind of code review), as well as a general overall discussion thread.
Both can be assigned to users, or organized into milestones.
//////////////////////////
GitLab においては、マージリクエストや issue を使って議論を深めていきます。
マージリクエストは、変更内容について行ごとに議論すること（簡易的なコードレビュー機能としても使えます）にも使えますし、マージリクエスト全体についての議論のスレッドとしても使えます。
また、マージリクエストや issue には担当者を設定できますし、マイルストーンの一部にもなります。

//////////////////////////
This section is focused mainly on the Git-related features of GitLab, but as a mature project, it provides many other features to help your team work together, such as project wikis and system maintenance tools.
One benefit to GitLab is that, once the server is set up and running, you'll rarely need to tweak a configuration file or access the server via SSH; most administration and general usage can be accomplished through the in-browser interface.
//////////////////////////
この節では主に GitLab の Git 関連部分を見てきました。ただ、GitLab はとても完成度の高いシステムで、共同作業に役立つ機能は他にもたくさんあります。たとえば、プロジェクト用の wiki やシステム管理ツールなどです。
最後に GitLab の利点としてもう一点挙げておきましょう。GitLab は、一度セットアップが終わってサーバーが動き出せば、設定ファイルをいじったりサーバーに SSH でログインしたりする必要はほとんどありません。管理作業、そして通常利用の大半は、ブラウザ画面から操作できます。
